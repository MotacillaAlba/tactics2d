// @Version: proto3
// @File: map.proto
// @Version: 1.0.0

syntax = "proto3";

package waymo.open_dataset;

message Map {
    repeated MapFeature map_features = 1;
    repeated DynamicState dynamic_states = 2;
}

message DynamicState {
    double timestamp_seconds = 1;
    repeated TrafficSignalLaneState lane_states = 2;
}

message TrafficSignalLaneState {
    int64 lane = 1;

    enum State {
        LANE_STATE_UNKNOWN = 0;
        LANE_STATE_ARROW_STOP = 1;
        LANE_STATE_ARROW_CAUTION = 2;
        LANE_STATE_ARROW_GO = 3;
        LANE_STATE_STOP = 4;
        LANE_STATE_CAUTION = 5;
        LANE_STATE_GO = 6;
        LANE_STATE_FLASHING_STOP = 7;
        LANE_STATE_FLASHING_CAUTION = 8;
    }

    State state = 2;

    MapPoint stop_point = 3;
}

message MapFeature {
    int64 id = 1;

    oneof feature_data {
        LaneCenter lane = 3;
        RoadLine road_line = 4;
        RoadEdge road_edge = 5;
        StopSign stop_sign = 7;
        Crosswalk crosswalk = 8;
        SpeedBump speed_bump = 9;
        Driveway driveway = 10;
    }
}

message MapPoint {
    double x = 1;
    double y = 2;
    double z = 3;
}

message BoundarySegment {
    int32 lane_start_index = 1;
    int32 lane_end_index = 2;
    int64 boundary_feature_id = 3;

    RoadLine.RoadLineType boundary_type = 4;
}

message LaneNeighbor {
    int64 feature_id = 1;
    int32 self_start_index = 2;
    int32 self_end_index = 3;
    int32 neighbor_start_index = 4;
    int32 neighbor_end_index = 5;
    repeated BoundarySegment boundaries = 6;
}

message LaneCenter {
    double speed_limit_mph = 1;

    enum LaneType {
        TYPE_UNDEFINED = 0;
        TYPE_FREEWAY = 1;
        TYPE_SURFACE_STREET = 2;
        TYPE_BIKE_LANE = 3;
    }

    LaneType type = 2;

    bool interpolating = 3;

    repeated MapPoint polyline = 8;

    repeated int64 entry_lanes = 9 [packed = true];
    repeated int64 exit_lanes = 10 [packed = true];
    repeated BoundarySegment left_boundaries = 13;
    repeated BoundarySegment right_boundaries = 14;
    repeated LaneNeighbor left_neighbors = 11;
    repeated LaneNeighbor right_neighbors = 12;
}

message RoadEdge {
    enum RoadEdgeType {
        TYPE_UNKNOWN = 0;
        TYPE_ROAD_EDGE_BOUNDARY = 1;
        TYPE_ROAD_EDGE_MEDIAN = 2;
    }

    RoadEdgeType type = 1;

    repeated MapPoint polyline = 2;
}

message RoadLine {
    enum RoadLineType {
        TYPE_UNKNOWN = 0;
        TYPE_BROKEN_SINGLE_WHITE = 1;
        TYPE_SOLID_SINGLE_WHITE = 2;
        TYPE_SOLID_DOUBLE_WHITE = 3;
        TYPE_BROKEN_SINGLE_YELLOW = 4;
        TYPE_BROKEN_DOUBLE_YELLOW = 5;
        TYPE_SOLID_SINGLE_YELLOW = 6;
        TYPE_SOLID_DOUBLE_YELLOW = 7;
        TYPE_PASSING_DOUBLE_YELLOW = 8;
      }

    RoadLineType type = 1;

    repeated MapPoint polyline = 2;
}

message StopSign {
    repeated int64 lane = 1;
    MapPoint position = 2;
}

message Crosswalk {
    repeated MapPoint polygon = 1;
}

message SpeedBump {
    repeated MapPoint polygon = 1;
}

message Driveway {
    repeated MapPoint polygon = 1;
}
